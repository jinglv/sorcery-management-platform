{"remainingRequest":"/Users/lvjing/sorcery-management-platform/front/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lvjing/sorcery-management-platform/front/src/components/HttpRunner/httpRunnerApiDialog.vue?vue&type=style&index=0&id=284c1703&scoped=true&lang=css&","dependencies":[{"path":"/Users/lvjing/sorcery-management-platform/front/src/components/HttpRunner/httpRunnerApiDialog.vue","mtime":1687688378775},{"path":"/Users/lvjing/sorcery-management-platform/front/node_modules/css-loader/dist/cjs.js","mtime":1679466708477},{"path":"/Users/lvjing/sorcery-management-platform/front/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1679466707591},{"path":"/Users/lvjing/sorcery-management-platform/front/node_modules/postcss-loader/src/index.js","mtime":1679466707836},{"path":"/Users/lvjing/sorcery-management-platform/front/node_modules/cache-loader/dist/cjs.js","mtime":1679466716417},{"path":"/Users/lvjing/sorcery-management-platform/front/node_modules/vue-loader/lib/index.js","mtime":1679466707590}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCiNpbWFnZSB7CiAgdGV4dC1hbGlnbjogbGVmdDsKfQo="},{"version":3,"sources":["httpRunnerApiDialog.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiPA;AACA;AACA","file":"httpRunnerApiDialog.vue","sourceRoot":"src/components/HttpRunner","sourcesContent":["<template>\n  <el-dialog\n    :title=\"showTitle\"\n    :visible.sync=\"dialogVisible\"\n    width=\"900px\"\n    :before-close=\"closeDialog\"\n  >\n    <el-form\n      ref=\"ruleForm\"\n      :model=\"apiForm\"\n      label-width=\"120px\"\n      class=\"demo-ruleForm\"\n    >\n      <el-form-item label=\"HttpRunner项目\">\n        <el-select\n          v-model=\"projectValue\"\n          placeholder=\"请选择HttpRunner项目名称\"\n          style=\"width: 100%;\"\n          @change=\"changeProject\"\n        >\n          <el-option\n            v-for=\"item in projectOption\"\n            :key=\"item.value\"\n            :label=\"item.label\"\n            :value=\"item.value\"\n          />\n        </el-select>\n      </el-form-item>\n      <el-form-item>\n        <div style=\"margin-top: 10px\">\n          <el-card style=\"width: 28%; height: 300px; float: left\">\n            <el-tree\n              :data=\"moduleData\"\n              node-key=\"id\"\n              default-expand-all\n              :expand-on-click-node=\"false\"\n              @node-click=\"nodeClick\"\n            >\n              <span slot-scope=\"{ node }\" class=\"custom-tree-node\">\n                <span style=\"float: left\">{{ node.label }}</span>\n              </span>\n            </el-tree>\n          </el-card>\n          <div style=\"width: 70%; float: right\">\n            <el-table\n              ref=\"multipleTable\"\n              :data=\"apiData\"\n              border\n              style=\"width: 100%\"\n              @select=\"selectionOneApi\"\n              @select-all=\"selectionAllApi\"\n            >\n              <el-table-column type=\"selection\" width=\"55\" />\n              <el-table-column prop=\"id\" label=\"接口ID\" width=\"70\" />\n              <el-table-column prop=\"name\" label=\"接口名称\" width=\"150\" />\n              <el-table-column prop=\"api_path\" label=\"接口地址\" />\n            </el-table>\n            <!--分页-->\n            <div style=\"width: 100%; text-align: right\">\n              <el-pagination\n                background\n                layout=\"prev, pager, next\"\n                :page-size=\"req.size\"\n                :total=\"total\"\n                @current-change=\"handleCurrentChange\"\n              />\n            </div>\n          </div>\n        </div>\n      </el-form-item>\n      <el-form-item style=\"text-align: right\">\n        <div class=\"dialog-footer\">\n          已选择【{{ apiNum }}】接口\n          <el-button @click=\"closeDialog()\">取消</el-button>\n          <el-button\n            type=\"primary\"\n            @click=\"showHttpRunnerApi\"\n          >创建HttpRunner工程接口</el-button>\n        </div>\n      </el-form-item>\n    </el-form>\n    <http-runner-create-api-dialog v-if=\"createApiDialog\" :modal=\"false\" :datas=\"apiInfoList\" :project=\"apiForm.httprunner_project_id\" @visible=\"dialogClose\" @cancel=\"closeDialog\" />\n  </el-dialog>\n</template>\n\n<script>\nimport { getModuleTree } from '@/api/modules'\nimport { httpRunnerProjectList } from '@/api/httprunner'\nimport { getApisList } from '@/api/apis'\nimport HttpRunnerCreateApiDialog from './httpRunnerCreateApiDialog'\n\nexport default {\n  components: { HttpRunnerCreateApiDialog },\n  props: {\n  },\n  data() {\n    return {\n      showTitle: '选择接口',\n      dialogVisible: true,\n      apiForm: {\n        name: '',\n        httprunner_project_id: '',\n        base_api_id: ''\n      },\n      moduleData: [],\n      apiData: [],\n      apiNum: 0,\n      casesData: [],\n      currentModuleId: 0,\n      apiInfoList: [],\n      projectValue: '',\n      projectLabel: '',\n      projectOption: [],\n      projectId: 0,\n      req: {\n        page: 1,\n        size: 10\n      },\n      // 分页页数\n      total: 10,\n      createApiDialog: false\n    }\n  },\n  mounted() {\n    this.initHttpRunnerProjectList()\n  },\n  methods: {\n    closeDialog() {\n      this.$emit('cancel', {})\n    },\n    dialogClose(value) {\n      if (value === false) {\n        this.createApiDialog = false\n      }\n    },\n    async initHttpRunnerProjectList() {\n      const resp = await httpRunnerProjectList(this.req)\n      if (resp.success === true) {\n        for (let i = 0; i < resp.items.length; i++) {\n          this.projectOption.push({\n            value: resp.items[i].id,\n            label: resp.items[i].name,\n            projectId: resp.items[i].project_id\n          })\n        }\n        this.total = resp.total\n        // this.$message.success('查询成功！')\n      } else {\n        this.$message.error('查询失败！')\n      }\n    },\n    changeProject(value) {\n      this.projectValue = value\n      this.projectLabel = this.projectOption.find(\n        (item) => item.value === value\n      ).label\n      this.projectId = this.projectOption.find(\n        (item) => item.value === value\n      ).projectId\n      this.apiForm.httprunner_project_id = value\n      this.getModuleList(this.projectId)\n    },\n    // 查询模块列表\n    async getModuleList(pid) {\n      const resp = await getModuleTree(pid)\n      if (resp.success === true) {\n        this.moduleData = resp.result\n      } else {\n        this.$message.error('查询失败！')\n      }\n    },\n    // 点击模块\n    nodeClick(data) {\n      this.currentModuleId = data.id\n      this.getModuleApiList(data.id)\n    },\n    // 初始化模块下接口数据\n    async getModuleApiList(mid) {\n      const resp = await getApisList(mid, this.req)\n      if (resp.success === true) {\n        this.apiData = resp.items\n        // this.$message.success('查询成功！')\n        // 记录模块下，已选中的接口\n        this.$nextTick(() => {\n          const rows = []\n          for (let i = 0; i < this.apiInfoList.length; i++) {\n            for (let j = 0; j < this.apiData.length; j++) {\n              if (this.apiInfoList[i].id === this.apiData[j].id) {\n                rows.push(this.apiData[j])\n              }\n            }\n          }\n          rows.forEach((row) => {\n            this.$refs.multipleTable.toggleRowSelection(row)\n          })\n        })\n      } else {\n        this.$message.error(resp.error.message)\n      }\n    },\n    // 选择所有用例\n    selectionAllApi(val, row) {\n      this.selectiveApi(val)\n    },\n    // 选择一条用例\n    selectionOneApi(val, row) {\n      this.selectiveApi(val)\n    },\n    // 公共方法：选择接口\n    selectiveApi(multipleSelection) {\n      var selective = false\n      for (let i = 0; i < this.apiInfoList.length; i++) {\n        if (this.apiInfoList[i].module_id === this.currentModuleId) {\n          selective = true\n          this.apiInfoList = multipleSelection\n        }\n      }\n      if (selective === false) {\n        for (let i = 0; i < multipleSelection.length; i++) {\n          this.apiInfoList.push(multipleSelection[i])\n        }\n      }\n      this.calculationApi()\n    },\n    // 公共方法：计算用例数量\n    calculationApi() {\n      this.apiNum = 0\n      this.apiNum += this.apiInfoList.length\n    },\n    showHttpRunnerApi() {\n      this.createApiDialog = true\n    },\n    // 跳转到第几页\n    handleCurrentChange(val) {\n      this.req.page = val\n      this.getModuleApiList(this.currentModuleId)\n    }\n  }\n}\n</script>\n<style scoped>\n#image {\n  text-align: left;\n}\n</style>\n"]}]}