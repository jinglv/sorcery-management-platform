{"remainingRequest":"/Users/lvjing/sorcery-management-platform/front/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lvjing/sorcery-management-platform/front/src/components/HttpRunner/httpRunnerUpdateApiDialog.vue?vue&type=style&index=0&id=2ce9e9fa&scoped=true&lang=css&","dependencies":[{"path":"/Users/lvjing/sorcery-management-platform/front/src/components/HttpRunner/httpRunnerUpdateApiDialog.vue","mtime":1688118591971},{"path":"/Users/lvjing/sorcery-management-platform/front/node_modules/css-loader/dist/cjs.js","mtime":1679466708477},{"path":"/Users/lvjing/sorcery-management-platform/front/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1679466707591},{"path":"/Users/lvjing/sorcery-management-platform/front/node_modules/postcss-loader/src/index.js","mtime":1679466707836},{"path":"/Users/lvjing/sorcery-management-platform/front/node_modules/cache-loader/dist/cjs.js","mtime":1679466716417},{"path":"/Users/lvjing/sorcery-management-platform/front/node_modules/vue-loader/lib/index.js","mtime":1679466707590}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCiNpbWFnZSB7CiAgdGV4dC1hbGlnbjogbGVmdDsKfQo="},{"version":3,"sources":["httpRunnerUpdateApiDialog.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6MA;AACA;AACA","file":"httpRunnerUpdateApiDialog.vue","sourceRoot":"src/components/HttpRunner","sourcesContent":["<template>\n  <el-dialog\n    :title=\"showTitle\"\n    :visible.sync=\"dialogVisible\"\n    width=\"900px\"\n    :before-close=\"closeDialog\"\n  >\n    <el-form\n      :model=\"apiDetailInfo\"\n      label-width=\"120px\"\n    >\n      <el-form-item label=\"接口名称：\" prop=\"name\">\n        <el-input v-model=\"apiDetailInfo.name\" />\n      </el-form-item>\n      <el-form-item label=\"基础环境：\" prop=\"base_url\">\n        <el-input v-model=\"apiDetailInfo.base_url\" :disabled=\"true\" />\n      </el-form-item>\n      <el-tabs v-model=\"activeName\">\n        <el-tab-pane label=\"请求参数变量\" :lazy=\"true\">\n          <json-editor-dialog :sjson=\"variables\" @getInputJsonStr=\"getInputVariables\" />\n        </el-tab-pane>\n        <el-tab-pane label=\"请求接口信息\" name=\"second\" :lazy=\"true\">\n          <el-form-item label=\"请求方式：\" prop=\"method\">\n            <el-select\n              v-model=\"method\"\n              placeholder=\"方法\"\n              style=\"width: 100%; float: left\"\n            >\n              <el-option\n                v-for=\"item in methodOption\"\n                :key=\"item.value\"\n                :label=\"item.label\"\n                :value=\"item.value\"\n              />\n            </el-select>\n          </el-form-item>\n          <el-form-item label=\"接口地址：\" prop=\"url\">\n            <el-input v-model=\"url\" />\n          </el-form-item>\n          <el-form-item label=\"请求头信息：\" prop=\"headers\">\n            <json-editor-dialog :sjson=\"headers\" @getInputJsonStr=\"getInputHeaders\" />\n          </el-form-item>\n          <el-form-item label=\"请求请求参数：\" prop=\"json\">\n            <json-editor-dialog :sjson=\"json\" @getInputJsonStr=\"getInputJson\" />\n          </el-form-item>\n        </el-tab-pane>\n        <el-tab-pane label=\"接口提取数据\" name=\"third\" :lazy=\"true\">\n          <json-editor-dialog :sjson=\"extract\" @getInputJsonStr=\"getInputExtract\" />\n        </el-tab-pane>\n        <el-tab-pane label=\"接口断言信息\" name=\"fourth\" :lazy=\"true\">\n          <json-editor-dialog :sjson=\"validate\" @getInputJsonStr=\"getInputValidate\" />\n        </el-tab-pane>\n        <el-tab-pane label=\"前置处理器(SetUp)\" name=\"fifth\" :lazy=\"true\">\n          <processor-dialog :code=\"pre_code\" @getInputCode=\"getPreCode\" />\n        </el-tab-pane>\n        <el-tab-pane label=\"后置处理器(TearDown)\" name=\"sixth\" :lazy=\"true\">\n          <processor-dialog :code=\"post_code\" @getInputCode=\"getPostCode\" />\n        </el-tab-pane>\n      </el-tabs>\n      <el-form-item style=\"text-align: right; margin-top: 20px;\">\n        <div class=\"dialog-footer\">\n          <el-button @click=\"closeDialog()\">取消</el-button>\n          <el-button type=\"primary\" @click=\"updateHttpRunnerApi()\">更新</el-button>\n        </div>\n      </el-form-item>\n    </el-form>\n  </el-dialog>\n</template>\n\n<script>\nimport { httpRunnerApiDetail, updateHttpRunnerApi } from '@/api/httprunner'\nimport ProcessorDialog from './processorDialog'\nimport JsonEditorDialog from './jsonEditorDialog'\n\nexport default {\n  components: {\n    ProcessorDialog,\n    JsonEditorDialog\n  },\n  props: {\n    id: {\n      type: Number,\n      default: 0\n    }\n  },\n  data() {\n    return {\n      showTitle: '编辑接口详情',\n      dialogVisible: true,\n      apiDetailInfo: {},\n      method: '',\n      url: '',\n      headers: '',\n      json: '',\n      methodOption: [\n        {\n          value: 'get',\n          label: 'GET'\n        },\n        {\n          value: 'post',\n          label: 'POST'\n        },\n        {\n          value: 'put',\n          label: 'PUT'\n        },\n        {\n          value: 'delete',\n          label: 'DELETE'\n        }\n      ],\n      activeName: 'first',\n      variables: '',\n      extract: '',\n      validate: '',\n      pre_code: '',\n      post_code: ''\n    }\n  },\n  beforeMount() {\n    this.httpRunnerApiDetail()\n  },\n  mounted() {\n  },\n  methods: {\n    closeDialog() {\n      this.$emit('cancel', {})\n    },\n    async httpRunnerApiDetail() {\n      const resp = await httpRunnerApiDetail(this.id)\n      if (resp.success === true) {\n        const body = resp.result\n        this.apiDetailInfo = body.api_info\n        this.variables = JSON.stringify(this.apiDetailInfo.variables)\n        this.method = this.apiDetailInfo.request.method\n        this.url = this.apiDetailInfo.request.url\n        this.headers = JSON.stringify(this.apiDetailInfo.request.headers)\n        this.json = JSON.stringify(this.apiDetailInfo.request.json)\n        this.extract = JSON.stringify(this.apiDetailInfo.extract)\n        this.validate = JSON.stringify(this.apiDetailInfo.validate)\n        this.pre_code = body.pre_processor\n        this.post_code = body.post_processor\n        // this.$message.success('查询成功！')\n      } else {\n        this.$message.error('查询失败！')\n      }\n    },\n    getInputVariables(value) {\n      this.variables = value\n    },\n    getInputHeaders(value) {\n      this.headers = value\n    },\n    getInputJson(value) {\n      this.json = value\n    },\n    getInputExtract(value) {\n      this.extract = value\n    },\n    getInputValidate(value) {\n      this.validate = value\n    },\n    getPreCode(code) {\n      this.pre_code = code\n    },\n    getPostCode(code) {\n      this.post_code = code\n    },\n    getVariables(code) {\n      this.variables = code\n    },\n    async updateHttpRunnerApi() {\n      const api_info_req = {\n        'name': this.apiDetailInfo.name,\n        'base_url': this.apiDetailInfo.base_url,\n        'variables': JSON.parse(this.variables),\n        'request': {\n          'method': this.method,\n          'url': this.url,\n          'headers': JSON.parse(this.headers),\n          'json': JSON.parse(this.json)\n        },\n        'extract': JSON.parse(this.extract),\n        'validate': JSON.parse(this.validate)\n      }\n      const req = {\n        'name': this.apiDetailInfo.name,\n        'api_info': api_info_req,\n        'pre_processor': this.pre_code,\n        'post_processor': this.post_code\n      }\n      console.info('update req:', req)\n      const resp = await updateHttpRunnerApi(this.id, req)\n      if (resp.success === true) {\n        this.$message.success('更新成功！')\n        this.closeDialog()\n      } else {\n        this.$message.error('更新失败！')\n      }\n    }\n  }\n}\n</script>\n<style scoped>\n#image {\n  text-align: left;\n}\n</style>\n"]}]}