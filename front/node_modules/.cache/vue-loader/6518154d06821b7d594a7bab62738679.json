{"remainingRequest":"/Users/jeanlv/sorcery-management-platform/front/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jeanlv/sorcery-management-platform/front/src/views/apis/index.vue?vue&type=style&index=0&id=2081f876&scoped=true&lang=css&","dependencies":[{"path":"/Users/jeanlv/sorcery-management-platform/front/src/views/apis/index.vue","mtime":1702869250342},{"path":"/Users/jeanlv/sorcery-management-platform/front/node_modules/css-loader/dist/cjs.js","mtime":1698032215256},{"path":"/Users/jeanlv/sorcery-management-platform/front/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1698032217228},{"path":"/Users/jeanlv/sorcery-management-platform/front/node_modules/postcss-loader/src/index.js","mtime":1698032216585},{"path":"/Users/jeanlv/sorcery-management-platform/front/node_modules/cache-loader/dist/cjs.js","mtime":1698032215054},{"path":"/Users/jeanlv/sorcery-management-platform/front/node_modules/vue-loader/lib/index.js","mtime":1698032217227}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5jdXN0b20tdHJlZS1ub2RlIHsKICB3aWR0aDogMTAwJTsKfQoubGFiZWwtdGl0bGUgewogIGZvbnQtZmFtaWx5OiAiTGliZXJhdGlvbiBNb25vIiwgbW9ub3NwYWNlLCBzZXJpZiwgc2Fucy1zZXJpZjsKICBmb250LXNpemU6IDI0cHg7Cn0KLmxhYmVsLXRleHQgewogIGZvbnQtZmFtaWx5OiAiTHVjaWRhIENhbGxpZ3JhcGh5IiwgY3Vyc2l2ZSwgc2VyaWYsIHNhbnMtc2VyaWY7CiAgZm9udC1zaXplOiAyMHB4OwogIGZvbnQtd2VpZ2h0OiBib2xkZXI7CiAgZmxvYXQ6IGxlZnQ7CiAgbWFyZ2luLXRvcDogNXB4Owp9Cg=="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0VA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/apis","sourcesContent":["<template>\n  <div class=\"apis\">\n    <div style=\"text-align: left; margin-top: 10px;\">\n      <el-form :inline=\"true\">\n        <el-form-item label=\"项目\">\n          <el-select\n            v-model=\"projectValue\"\n            placeholder=\"请选择项目\"\n            @change=\"changeProject\"\n          >\n            <el-option\n              v-for=\"item in projectOption\"\n              :key=\"item.value\"\n              :label=\"item.label\"\n              :value=\"item.value\"\n            />\n          </el-select>\n        </el-form-item>\n        <el-form-item style=\"float: right\">\n          <el-button class=\"el-icon-circle-plus-outline\" type=\"primary\" @click=\"createApi()\">创建接口</el-button>\n        </el-form-item>\n        <el-form-item style=\"float: right\">\n          <el-button class=\"el-icon-eleme\" style=\"margin-left: 35px\" @click=\"createEnv()\">配置环境变量</el-button>\n        </el-form-item>\n      </el-form>\n    </div>\n    <div style=\"margin-top: 10px\">\n      <el-card style=\"width: 24%; float: left\" class=\"box-card card-height\" :style=\"conheight\">\n        <el-button\n          class=\"label-title\"\n          type=\"text\"\n          icon=\"el-icon-circle-plus-outline\"\n          @click=\"createRootModule\"\n        >{{ projectLabel }}-模块</el-button>\n        <el-tree\n          :data=\"moduleData\"\n          node-key=\"id\"\n          default-expand-all\n          :expand-on-click-node=\"false\"\n          @node-click=\"nodeClick\"\n        >\n          <span slot-scope=\"{ node, data }\" class=\"custom-tree-node\">\n            <div class=\"el-icon-grape\" style=\"float: left;margin-top: 10px;margin-right: 5px;\" />\n            <span class=\"label-text\">{{ node.label }}</span>\n            <span style=\"float: right\">\n              <el-button type=\"text\" size=\"mini\" @click=\"() => append(data)\">\n                <i class=\"el-icon-circle-plus-outline\" />\n              </el-button>\n              <el-button\n                type=\"text\"\n                size=\"mini\"\n                @click=\"() => remove(node, data)\"\n              >\n                <i class=\"el-icon-delete\" />\n              </el-button>\n            </span>\n          </span>\n        </el-tree>\n      </el-card>\n      <div style=\"width: 75%; float: right\">\n        <el-table\n          :data=\"apisData\"\n          border\n          style=\"width: 100%\"\n        >\n          <el-table-column prop=\"id\" label=\"ID\" width=\"50\" />\n          <el-table-column prop=\"name\" label=\"接口名称\" width=\"auto\" />\n          <el-table-column prop=\"method\" label=\"请求方法\" width=\"auto\" />\n          <el-table-column prop=\"api_path\" label=\"API Path\" width=\"auto\" />\n          <el-table-column prop=\"module.name\" label=\"所属模块\" width=\"auto\" />\n          <el-table-column prop=\"create_time\" label=\"创建时间\" width=\"auto\" />\n          <el-table-column fixed=\"right\" label=\"操作\">\n            <template slot-scope=\"scope\">\n              <el-button\n                type=\"text\"\n                size=\"small\"\n                @click=\"caseRowApiInfo(scope.row)\"\n              >查看</el-button>\n              <el-button\n                type=\"text\"\n                size=\"small\"\n                @click=\"editRowApiInfo(scope.row)\"\n              >编辑</el-button>\n              <el-button\n                type=\"text\"\n                size=\"small\"\n                @click=\"deleteRowApiInfo(scope.row)\"\n              >删除</el-button>\n            </template>\n          </el-table-column>\n        </el-table>\n        <!--分页-->\n        <div style=\"width: 100%; text-align: right\">\n          <el-pagination\n            background\n            :total=\"total\"\n            :page-size=\"req.size\"\n            layout=\"total, prev, pager, next\"\n            @current-change=\"handleCurrentChange\"\n          />\n        </div>\n      </div>\n    </div>\n    <el-drawer\n      :title=\"caseTitle\"\n      :visible.sync=\"drawer\"\n      direction=\"rtl\"\n      size=\"55%\"\n    >\n      <api-dialog v-if=\"drawer\" :title=\"caseTitle\" :mid=\"currentModule\" :pid=\"projectValue\" :cid=\"currentCase\" @close=\"closeDrawer()\" @refresh=\"refreshApiList()\" />\n    </el-drawer>\n    <!-- 创建模块 -->\n    <module-dialog\n      v-if=\"dialogFlag\"\n      :pid=\"projectValue\"\n      :plabel=\"projectLabel\"\n      :root-id=\"rootFlag\"\n      :parent-obj=\"parentObj\"\n      @cancel=\"closeDialog\"\n    />\n    <!--环境模块-->\n    <envs-dialog v-if=\"dialogEnvsFlag\" :title=\"evnsTitle\" :pid=\"projectValue\" @cancel=\"closeEnvDialog\" />\n  </div>\n</template>\n<script>\nimport ModuleDialog from '@/components/Module/moduleDialog.vue'\nimport ApiDialog from '@/components/Api/apiDialog.vue'\nimport EnvsDialog from '@/components/Envs/envsDialog.vue'\nimport { projectList } from '@/api/projects'\nimport { getApisList, deleteApi } from '@/api/apis'\nimport { getModuleTree, deleteModule } from '@/api/modules'\n\nexport default {\n  name: 'CaseModule',\n  components: {\n    ModuleDialog,\n    ApiDialog,\n    EnvsDialog\n  },\n  data() {\n    return {\n      projectValue: 1,\n      projectLabel: '',\n      rootFlag: true,\n      projectOption: [],\n      moduleData: [],\n      dialogFlag: false,\n      parentObj: {},\n      apisData: [],\n      drawer: false,\n      caseTitle: '',\n      currentModule: 0, // 当前选中的模块\n      currentCase: 0, // 当前选中的用例\n      req: {\n        page: 1,\n        size: 10\n      },\n      // 分页页数\n      total: 10,\n      dialogEnvsFlag: false,\n      conheight: {\n        height: ''\n      },\n      evnsTitle: 'create'\n    }\n  },\n  mounted() {\n    this.initProjectList()\n  },\n  created() {\n    window.addEventListener('resize', this.getHeight)\n    this.getHeight()\n  },\n  methods: {\n    // 设置卡片高度自适应el-card\n    getHeight() {\n      this.conheight.height = window.innerHeight - 170 + 'px'\n    },\n    // 初始化项目列表\n    async initProjectList() {\n      const req_body = {\n        'name': ''\n      }\n      const resp = await projectList(this.req, req_body)\n      if (resp.success === true) {\n        this.projectValue = resp.items[0].id\n        this.projectLabel = resp.items[0].name\n        // 在初始化项目信息，同时初始化项目下的模块信息\n        this.initModuleList(this.projectValue)\n        for (let i = 0; i < resp.items.length; i++) {\n          this.projectOption.push({\n            value: resp.items[i].id,\n            label: resp.items[i].name\n          })\n        }\n        // this.$message.success(\"查询成功！\")\n      } else {\n        this.$message.error('查询失败！')\n      }\n    },\n    // 修改选中项目\n    changeProject(value) {\n      console.log('change project -->', value)\n      this.projectValue = value\n      this.projectLabel = this.projectOption.find(\n        (item) => item.value === value\n      ).label\n      console.log('选中项目名称', this.projectLabel)\n      this.initModuleList(value)\n    },\n    // 查询模块列表\n    async initModuleList(pid) {\n      const resp = await getModuleTree(pid)\n      if (resp.success === true) {\n        this.moduleData = resp.result\n        // this.$message.success(\"查询成功！\")\n      } else {\n        this.$message.error('查询失败！')\n      }\n    },\n    // 创建模块\n    createRootModule() {\n      this.parentObj = {}\n      this.dialogFlag = true\n      this.rootFlag = true\n    },\n    // 创建模块子节点\n    append(data) {\n      this.dialogFlag = true\n      this.rootFlag = false\n      this.parentObj = data\n    },\n    // 删除模块\n    remove(node, data) {\n      deleteModule(data.id).then((resp) => {\n        if (resp.success === true) {\n          this.$message.success('删除成功！')\n          this.initModuleList(this.projectValue)\n        } else {\n          this.$message.error(resp.error.msg)\n        }\n      })\n    },\n    // 创建模块关闭\n    closeDialog() {\n      this.dialogFlag = false\n      this.initModuleList(this.projectValue)\n    },\n    nodeClick(data) {\n      this.currentModule = data.id\n      this.getCaseList(data.id)\n    },\n    // 获取模块下的测试用例列表\n    async getCaseList(mid) {\n      const resp = await getApisList(mid, this.req)\n      if (resp.success === true) {\n        this.total = resp.total\n        for (let i = 0; i < resp.items.length; i++) {\n          resp.items[i].create_time = this.$moment(\n            resp.items[i].create_time\n          ).format('YYYY-MM-DD HH:mm:ss')\n        }\n        this.apisData = resp.items\n        this.$message.success('查询成功！')\n      } else {\n        this.$message.error('查询失败！')\n      }\n    },\n    // 创建测试用例\n    createApi() {\n      if (this.currentModule === 0) {\n        this.$message.warning('请选择模块!')\n      } else {\n        this.currentCase = 0\n        this.drawer = true\n        this.caseTitle = '创建接口'\n      }\n    },\n    // 查看用例详情\n    caseRowApiInfo(row) {\n      // 点击用例，获取用例id\n      this.currentCase = row.id\n      this.drawer = true\n      this.caseTitle = '接口详情'\n    },\n    // 编辑测试用例\n    editRowApiInfo(row) {\n      // 点击用例，获取用例id\n      this.currentCase = row.id\n      this.drawer = true\n      this.caseTitle = '编辑接口'\n    },\n    // 删除测试用例\n    deleteRowApiInfo(row) {\n      // 点击用例，获取用例id\n      this.currentCase = row.id\n      this.$confirm('删除接口, 是否继续?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning',\n        center: true\n      }).then(() => {\n        const resp = deleteApi(this.currentCase)\n        if (resp.success === true) {\n          this.getCaseList(this.currentModule)\n        } else {\n          this.$message.error(resp.error.msg)\n        }\n        this.$message({\n          type: 'success',\n          message: '删除成功!'\n        })\n      }).catch(() => {\n        this.$message({\n          type: 'info',\n          message: '已取消删除'\n        })\n      })\n    },\n    // 跳转到第几页\n    handleCurrentChange(val) {\n      console.log(`当前页: ${val}`)\n      this.req.page = val\n      this.getCaseList(this.currentModule)\n    },\n    // 传递子组件，关闭抽屉\n    closeDrawer() {\n      this.drawer = false\n    },\n    // 传递子组件，关闭抽屉，刷新列表\n    refreshApiList() {\n      this.getCaseList(this.currentModule)\n    },\n    // 创建模块\n    createEnv() {\n      this.dialogEnvsFlag = true\n    },\n    // 创建模块关闭\n    closeEnvDialog() {\n      this.dialogEnvsFlag = false\n      this.initModuleList(this.projectValue)\n    }\n  }\n}\n</script>\n<style scoped>\n.custom-tree-node {\n  width: 100%;\n}\n.label-title {\n  font-family: \"Liberation Mono\", monospace, serif, sans-serif;\n  font-size: 24px;\n}\n.label-text {\n  font-family: \"Lucida Calligraphy\", cursive, serif, sans-serif;\n  font-size: 20px;\n  font-weight: bolder;\n  float: left;\n  margin-top: 5px;\n}\n</style>\n"]}]}