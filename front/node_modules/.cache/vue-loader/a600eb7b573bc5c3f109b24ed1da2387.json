{"remainingRequest":"/Users/lvjing/sorcery-management-platform/front/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/lvjing/sorcery-management-platform/front/src/components/HttpRunner/httpRunnerTestCaseDialog.vue?vue&type=style&index=0&id=e5b786ce&scoped=true&lang=css&","dependencies":[{"path":"/Users/lvjing/sorcery-management-platform/front/src/components/HttpRunner/httpRunnerTestCaseDialog.vue","mtime":1689560099228},{"path":"/Users/lvjing/sorcery-management-platform/front/node_modules/css-loader/dist/cjs.js","mtime":1679466708477},{"path":"/Users/lvjing/sorcery-management-platform/front/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1679466707591},{"path":"/Users/lvjing/sorcery-management-platform/front/node_modules/postcss-loader/src/index.js","mtime":1679466707836},{"path":"/Users/lvjing/sorcery-management-platform/front/node_modules/cache-loader/dist/cjs.js","mtime":1679466716417},{"path":"/Users/lvjing/sorcery-management-platform/front/node_modules/vue-loader/lib/index.js","mtime":1679466707590}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKI2ltYWdlIHsKICB0ZXh0LWFsaWduOiBsZWZ0Owp9Ci5jb250YWluZXIgewogIHBvc2l0aW9uOiByZWxhdGl2ZTsKfQouYnRuIHsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgcmlnaHQ6IDA7Cn0KLmxhYmVsLXRleHQgewogIGZvbnQtZmFtaWx5OiAiTHVjaWRhIENhbGxpZ3JhcGh5IiwgY3Vyc2l2ZSwgc2VyaWYsIHNhbnMtc2VyaWY7CiAgZm9udC1zaXplOiAyMHB4OwogIGZvbnQtd2VpZ2h0OiBib2xkZXI7CiAgbWFyZ2luLXRvcDogNXB4Owp9Cg=="},{"version":3,"sources":["httpRunnerTestCaseDialog.vue"],"names":[],"mappingsshBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"httpRunnerTestCaseDialog.vue","sourceRoot":"src/components/HttpRunner","sourcesContent":["<template>\n  <div :style=\"{'max-height': timeLineHeight +'px'}\" style=\"margin-left: 10px; margin-right: 10px; overflow-y:scroll;\">\n    <el-form\n      ref=\"ruleForm\"\n      :model=\"casesFrom\"\n      label-width=\"120px\"\n      class=\"demo-ruleForm\"\n    >\n      <el-form-item label=\"HttpRunner项目\">\n        <el-select\n          v-model=\"casesFrom.httprunner_project_id\"\n          placeholder=\"请选择HttpRunner项目名称\"\n          style=\"width: 100%;\"\n          @change=\"changeProject\"\n        >\n          <el-option\n            v-for=\"item in projectOption\"\n            :key=\"item.value\"\n            :label=\"item.label\"\n            :value=\"item.value\"\n          />\n        </el-select>\n      </el-form-item>\n      <el-form-item label=\"测试用例名称：\" prop=\"name\">\n        <el-input v-model=\"casesFrom.name\" placeholder=\"请输入测试用例名称\" />\n      </el-form-item>\n      <el-tabs v-model=\"activeName\">\n        <el-tab-pane label=\"测试步骤\" name=\"first\" prop=\"testSteps\">\n          <div style=\"height: 600px; overflow-y: auto;\">\n            <el-table :data=\"testStepList\">\n              <el-table-column>\n                <template slot-scope=\"scope\">\n                  <el-form label-width=\"120px\">\n                    <div class=\"container\">\n                      <span class=\"label-text\">Setp: {{ scope.$index + 1 }}</span>\n                      <el-button\n                        v-if=\"scope.row.show === 'true'\"\n                        type=\"success\"\n                        class=\"btn\"\n                        icon=\"el-icon-circle-plus-outline\"\n                        size=\"mini\"\n                        style=\"margin-right: 50px;\"\n                        plain\n                        @click=\"addTestStep(scope.$index)\"\n                      />\n                      <el-button\n                        class=\"btn\"\n                        type=\"danger\"\n                        size=\"mini\"\n                        icon=\"el-icon-delete\"\n                        plain\n                        @click=\"removeTestStep(scope.$index)\"\n                      />\n                    </div>\n                    <div style=\"margin-top: 15px;\">\n                      <el-form-item label=\"测试步骤名称：\" prop=\"api_name\">\n                        <el-input v-model=\"scope.row.api_name\" placeholder=\"请输入测试步骤名称\" size=\"small\" />\n                      </el-form-item>\n                      <el-form-item label=\"选择接口：\" prop=\"api_id\">\n                        <el-select\n                          v-model=\"scope.row.api_id\"\n                          placeholder=\"请选择HttpRunner项目下的接口\"\n                          size=\"small\"\n                          style=\"width: 100%;\"\n                        >\n                          <el-option\n                            v-for=\"i in apiOption\"\n                            :key=\"'api' + i.value\"\n                            :label=\"i.label\"\n                            :value=\"i.value\"\n                          />\n                        </el-select>\n                      </el-form-item>\n                      <el-collapse>\n                        <el-collapse-item title=\"其他内容\">\n                          <div style=\"height: 300px; overflow-y: auto;\">\n                            <el-form-item label=\"提取器：\" prop=\"extracts\">\n                              <el-button\n                                type=\"primary\"\n                                size=\"mini\"\n                                icon=\"el-icon-plus\"\n                                plain\n                                @click=\"addExtracts(scope)\"\n                              >添加</el-button>\n                              <div v-for=\"(item, index) in scope.row.extracts\" :key=\"index\" style=\"margin-top: 5px;\">\n                                <el-col :span=\"6\">\n                                  <el-input\n                                    v-model=\"item.name\"\n                                    placeholder=\"变量名\"\n                                    style=\"width: 200px\"\n                                  />\n                                </el-col>\n                                <el-col :span=\"7\">\n                                  <el-input\n                                    v-model=\"item.value\"\n                                    placeholder=\"提取规则\"\n                                    style=\"width: 100%\"\n                                  />\n                                </el-col>\n                                <el-button\n                                  type=\"text\"\n                                  style=\"padding-right: 10px\"\n                                  @click=\"removeExtracts(scope, index)\"\n                                >\n                                  <i class=\"el-icon-remove-outline\" />\n                                </el-button>\n                              </div>\n                            </el-form-item>\n                            <el-form-item label=\"断言：\" prop=\"validates\">\n                              <el-button\n                                type=\"primary\"\n                                size=\"mini\"\n                                icon=\"el-icon-plus\"\n                                plain\n                                @click=\"addValidates(scope)\"\n                              >添加</el-button>\n                              <div v-for=\"(item, index) in scope.row.validates\" :key=\"index\" style=\"margin-top: 5px;\">\n                                <el-form-item>\n                                  <el-col :span=\"4\">\n                                    <el-input\n                                      v-model=\"item.assert_extract\"\n                                      placeholder=\"断言表达式\"\n                                      style=\"width: 100%\"\n                                    />\n                                  </el-col>\n                                  <el-col class=\"line\" :span=\"3\">\n                                    <el-select\n                                      v-model=\"item.assert_type\"\n                                      placeholder=\"断言类型\"\n                                      @change=\"changeAssert\"\n                                    >\n                                      <el-option\n                                        v-for=\"i in assertOption\"\n                                        :key=\"i.value\"\n                                        :label=\"i.label\"\n                                        :value=\"i.value\"\n                                      />\n                                    </el-select>\n                                  </el-col>\n                                  <el-col :span=\"6\">\n                                    <el-input\n                                      v-model=\"item.expect_text\"\n                                      placeholder=\"断言预期值\"\n                                      style=\"width: 100%\"\n                                    />\n                                  </el-col>\n                                  <el-button\n                                    type=\"text\"\n                                    style=\"padding-right: 10px\"\n                                    @click=\"removeValidates(scope,index)\"\n                                  >\n                                    <i class=\"el-icon-remove-outline\" />\n                                  </el-button>\n                                </el-form-item>\n                              </div>\n                            </el-form-item>\n                            <el-form-item label=\"变量：\" prop=\"variables\">\n                              <el-button\n                                type=\"primary\"\n                                size=\"mini\"\n                                icon=\"el-icon-plus\"\n                                plain\n                                @click=\"addVariables(scope)\"\n                              >添加</el-button>\n                              <div v-for=\"(item, index) in scope.row.variables\" :key=\"index\" style=\"margin-top: 5px;\">\n                                <el-col :span=\"6\">\n                                  <el-input\n                                    v-model=\"item.name\"\n                                    placeholder=\"变量名\"\n                                    style=\"width: 200px\"\n                                  />\n                                </el-col>\n                                <el-col :span=\"7\">\n                                  <el-input\n                                    v-model=\"item.value\"\n                                    placeholder=\"变量值\"\n                                    style=\"width: 100%\"\n                                  />\n                                </el-col>\n                                <el-button\n                                  type=\"text\"\n                                  style=\"padding-right: 10px\"\n                                  @click=\"removeVariables(scope,index)\"\n                                >\n                                  <i class=\"el-icon-remove-outline\" />\n                                </el-button>\n                              </div>\n                            </el-form-item>\n                          </div>\n                        </el-collapse-item>\n                      </el-collapse>\n                    </div>\n                  </el-form>\n                </template>\n              </el-table-column>\n            </el-table>\n          </div>\n        </el-tab-pane>\n        <el-tab-pane label=\"公共变量\" name=\"second\" :lazy=\"true\">\n          <div style=\"height: 300px; overflow-y: auto;\">\n            <dict-dialog :dict-data=\"publicVariable\" />\n          </div>\n        </el-tab-pane>\n        <el-tab-pane label=\"前置处理器(SetUp)\" name=\"fifth\" :lazy=\"true\">\n          <el-row :gutter=\"20\">\n            <el-col :span=\"12\">\n              <div align=\"right\">\n                <el-button size=\"small\" type=\"primary\" @click=\"runPreCode()\">点击运行</el-button>\n              </div>\n              <div style=\"margin-top: 10px;\">\n                <ace-code-editor-dialog ref=\"ace\" :value=\"pre_code\" class=\"ace-editor\" :min-lines=\"18\" :mode-path=\"language_python\" @getCode=\"getPreCode\" />\n              </div>\n            </el-col>\n            <el-col :span=\"12\">\n              <el-button size=\"small\" type=\"warning\" disabled>运行结果</el-button>\n              <div style=\"margin-top: 10px;\">\n                <ace-code-editor-dialog ref=\"ace\" v-model=\"result\" class=\"ace-editor\" :min-lines=\"18\" :mode-path=\"language_python\" />\n              </div>\n            </el-col>\n          </el-row>\n        </el-tab-pane>\n        <el-tab-pane label=\"后置处理器(TearDown)\" name=\"sixth\" :lazy=\"true\">\n          <el-row :gutter=\"20\">\n            <el-col :span=\"12\">\n              <div align=\"right\">\n                <el-button size=\"small\" type=\"primary\" @click=\"runPostCode()\">点击运行</el-button>\n              </div>\n              <div style=\"margin-top: 10px;\">\n                <ace-code-editor-dialog ref=\"ace\" :value=\"post_code\" class=\"ace-editor\" :min-lines=\"18\" :mode-path=\"language_python\" @getCode=\"getPostCode\" />\n              </div>\n            </el-col>\n            <el-col :span=\"12\">\n              <el-button size=\"small\" type=\"warning\" disabled>运行结果</el-button>\n              <div style=\"margin-top: 10px;\">\n                <ace-code-editor-dialog ref=\"ace\" v-model=\"result\" class=\"ace-editor\" :min-lines=\"18\" :mode-path=\"language_python\" />\n              </div>\n            </el-col>\n          </el-row>\n        </el-tab-pane>\n      </el-tabs>\n      <el-form-item style=\"text-align: right; margin-top: 20px;\">\n        <div class=\"dialog-footer\">\n          <el-button @click=\"closeDialog()\">取消</el-button>\n          <el-button type=\"primary\" @click=\"createTestCase()\">确定</el-button>\n        </div>\n      </el-form-item>\n    </el-form>\n  </div>\n</template>\n\n<script>\nimport { httpRunnerProjectList, run, getHttpRunnerApiIds, createHttpRunnerTestCase, httpRunnerTestCaseDetail } from '@/api/httprunner'\nimport aceCodeEditorDialog from '@/components/HttpRunner/aceCodeEditorDialog'\nimport dictDialog from '@/components/Api/dictDialog'\n\nexport default {\n  components: {\n    aceCodeEditorDialog,\n    dictDialog\n  },\n  props: {\n    title: {\n      type: String,\n      default: null\n    },\n    cid: {\n      type: Number,\n      default: 1\n    }\n  },\n  data() {\n    return {\n      timeLineHeight: '',\n      projectValue: '',\n      projectLabel: '',\n      projectOption: [],\n      apiDetailInfo: {},\n      testStepList: [{\n        api_name: '',\n        api_id: '',\n        variables: [],\n        extracts: [],\n        validates: [],\n        // 是否显示新增按钮\n        show: 'true'\n      }],\n      apiValue: '',\n      apiLabel: '',\n      apiOption: [],\n      casesFrom: {\n        name: '',\n        httprunner_project_id: '',\n        public_variables: '',\n        test_case_infos: [],\n        pre_processor: '',\n        post_processor: ''\n      },\n      publicVariable: [{\n        name: '',\n        value: '',\n        // 是否显示新增按钮\n        show: 'true'\n      }],\n      extracts: [],\n      variables: [],\n      validates: [],\n      assertLabel: '',\n      assertOption: [\n        {\n          value: 'contains',\n          label: 'CONTAINS'\n        },\n        {\n          value: 'equal',\n          label: 'EQUAL'\n        }\n      ],\n      activeName: 'first',\n      language_python: 'python',\n      pre_code: '',\n      in_pre_code: '',\n      post_code: '',\n      in_post_code: '',\n      result: ''\n    }\n  },\n  mounted() {\n    // 窗口滑动\n    this.timeLineHeight = document.documentElement.clientHeight - 150\n    window.onresize = () => { this.timeLineHeight = document.documentElement.clientHeight - 150 }\n    this.initHttpRunnerProjectList()\n    if (this.title === '编辑测试用例') {\n      this.httpRunnerTestCaseDetail()\n    }\n  },\n  methods: {\n    closeDialog() {\n      this.$emit('cancel', {})\n    },\n    async initHttpRunnerProjectList() {\n      const resp = await httpRunnerProjectList(this.req)\n      if (resp.success === true) {\n        for (let i = 0; i < resp.items.length; i++) {\n          this.projectOption.push({\n            value: resp.items[i].id,\n            label: resp.items[i].name\n          })\n        }\n        this.total = resp.total\n        // this.$message.success('查询成功！')\n      } else {\n        this.$message.error('查询失败！')\n      }\n    },\n    changeProject(value) {\n      this.projectValue = value\n      this.projectLabel = this.projectOption.find(\n        (item) => item.value === value\n      ).label\n      this.httpRunnerProjectIds()\n    },\n    async httpRunnerProjectIds() {\n      const resp = await getHttpRunnerApiIds(this.projectValue)\n      if (resp.success === true) {\n        for (let i = 0; i < resp.result.length; i++) {\n          this.apiOption.push({\n            value: resp.result[i].id,\n            label: resp.result[i].name\n          })\n        }\n        // this.$message.success('查询成功！')\n      } else {\n        this.$message.error('查询失败！')\n      }\n    },\n    // 添加测试步骤\n    addTestStep(index) {\n      const list = this.testStepList\n      list[index].show = 'false'\n      list.push({\n        name: '',\n        api_id: '',\n        variables: [],\n        extracts: [],\n        validates: [],\n        show: 'true'\n      })\n      this.testStepList = list\n    },\n    addExtracts(scope) {\n      scope.row.extracts.push({ name: '', value: '' })\n    },\n    removeExtracts(scope, index) {\n      scope.row.extracts.splice(index, 1)\n    },\n    addValidates(scope) {\n      scope.row.validates.push({ assert_type: '', assert_extract: '', expect_text: '' })\n    },\n    changeAssert(value) {\n      this.assert_type = value\n      this.assertLabel = this.assertOption.find(\n        (item) => item.value === value\n      ).label\n    },\n    removeValidates(scope, index) {\n      scope.row.validates.splice(index, 1)\n    },\n    addVariables(scope) {\n      scope.row.variables.push({ name: '', value: '' })\n    },\n    removeVariables(scope, index) {\n      scope.row.variables.splice(index, 1)\n    },\n    removeTestStep(index) {\n      const list = this.testStepList\n      if (index === 0 && list.length === 1) {\n        list.splice(index, 1)\n        list.push({\n          name: '',\n          api_id: '',\n          variables: [],\n          extracts: [],\n          validates: [],\n          show: 'true'\n        })\n      } else {\n        list.splice(index, 1)\n      }\n      if (index === list.length) {\n        list[index - 1].show = 'true'\n      }\n      this.testStepList = list\n    },\n    getPreCode(code) {\n      this.in_pre_code = code\n    },\n    getPostCode(code) {\n      this.in_post_code = code\n    },\n    async createTestCase() {\n      console.info('testStepList:', this.testStepList)\n      const testSteps = []\n      for (let i = 0; i < this.testStepList.length; i++) {\n        const step = this.testStepList[i]\n        const step_dict = {\n          'name': step.name,\n          'api_id': step.api_id,\n          'variables': this.list_to_dict(step.variables),\n          'extracts': this.list_to_dict(step.extracts),\n          'validates': step.validates.map(item => {\n            const assertType = item.assert_type\n            const assertExtract = item.assert_extract\n            const expectText = item.expect_text\n            return { [assertType]: [assertExtract, expectText] }\n          })\n        }\n        testSteps.push(step_dict)\n      }\n      const public_variables_dict = this.list_to_dict(this.publicVariable)\n      this.casesFrom.public_variables = public_variables_dict\n      this.casesFrom.test_case_infos = testSteps\n      this.casesFrom.pre_processor = this.in_pre_code\n      this.casesFrom.post_processor = this.in_post_code\n      console.info('req:', JSON.stringify(this.casesFrom))\n      const resp = await createHttpRunnerTestCase(this.casesFrom)\n      if (resp.success === true) {\n        this.$message.success('创建成功！')\n        this.closeDialog()\n      } else {\n        this.$message.error('创建失败！')\n      }\n    },\n    // 运行\n    async runPreCode() {\n      const req = {\n        code: this.in_pre_code === '' ? this.pre_code : this.in_pre_code\n      }\n      const resp = await run(req)\n      if (resp.success === true) {\n        this.result = resp.result\n      } else {\n        this.$message.error('执行失败！')\n      }\n    },\n    async runPostCode() {\n      const req = {\n        code: this.in_post_code === '' ? this.post_code : this.in_post_code\n      }\n      const resp = await run(req)\n      if (resp.success === true) {\n        this.result = resp.result\n      } else {\n        this.$message.error('执行失败！')\n      }\n    },\n    async httpRunnerTestCaseDetail() {\n      const resp = await httpRunnerTestCaseDetail(this.cid)\n      if (resp.success === true) {\n        this.casesFrom = resp.result\n        this.testStepList = JSON.parse(this.casesFrom.teststeps.replace(/'/g, '\"'))\n        this.testStepList[this.testStepList.length - 1]['show'] = 'true'\n        // this.$message.success('查询成功！')\n      } else {\n        this.$message.error('查询失败！')\n      }\n    },\n    // 列表转换字典\n    list_to_dict(lst) {\n      const dict = {}\n      for (let i = 0; i < lst.length; i++) {\n        const item = lst[i]\n        if (item.name === '' && item.value === '') {\n          return dict\n        }\n        dict[item.name] = item.value\n      }\n      return dict\n    },\n    // 列别转换字典\n    dict_to_list(lst) {\n      const dict = {}\n      for (let i = 0; i < lst.length; i++) {\n        const item = lst[i]\n        if (item.name === '' && item.value === '') {\n          return dict\n        }\n        dict[item.name] = item.value\n      }\n      return dict\n    }\n  }\n}\n</script>\n<style scoped>\n#image {\n  text-align: left;\n}\n.container {\n  position: relative;\n}\n.btn {\n  position: absolute;\n  right: 0;\n}\n.label-text {\n  font-family: \"Lucida Calligraphy\", cursive, serif, sans-serif;\n  font-size: 20px;\n  font-weight: bolder;\n  margin-top: 5px;\n}\n</style>\n"]}]}