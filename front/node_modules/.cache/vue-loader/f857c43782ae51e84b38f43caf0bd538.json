{"remainingRequest":"/Users/jeanlv/sorcery-management-platform/front/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jeanlv/sorcery-management-platform/front/src/views/cases/manage/index.vue?vue&type=style&index=0&id=a8307ee4&scoped=true&lang=css&","dependencies":[{"path":"/Users/jeanlv/sorcery-management-platform/front/src/views/cases/manage/index.vue","mtime":1702543635648},{"path":"/Users/jeanlv/sorcery-management-platform/front/node_modules/css-loader/dist/cjs.js","mtime":1698032215256},{"path":"/Users/jeanlv/sorcery-management-platform/front/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1698032217228},{"path":"/Users/jeanlv/sorcery-management-platform/front/node_modules/postcss-loader/src/index.js","mtime":1698032216585},{"path":"/Users/jeanlv/sorcery-management-platform/front/node_modules/cache-loader/dist/cjs.js","mtime":1698032215054},{"path":"/Users/jeanlv/sorcery-management-platform/front/node_modules/vue-loader/lib/index.js","mtime":1698032217227}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5jdXN0b20tdHJlZS1ub2RlIHsKICB3aWR0aDogMTAwJTsKfQoubGFiZWwtdGl0bGUgewogIGZvbnQtZmFtaWx5OiAiTGliZXJhdGlvbiBNb25vIiwgbW9ub3NwYWNlLCBzZXJpZiwgc2Fucy1zZXJpZjsKICBmb250LXNpemU6IDI0cHg7Cn0KLmxhYmVsLXRleHQgewogIGZvbnQtZmFtaWx5OiAiTHVjaWRhIENhbGxpZ3JhcGh5IiwgY3Vyc2l2ZSwgc2VyaWYsIHNhbnMtc2VyaWY7CiAgZm9udC1zaXplOiAyMHB4OwogIGZvbnQtd2VpZ2h0OiBib2xkZXI7CiAgZmxvYXQ6IGxlZnQ7CiAgbWFyZ2luLXRvcDogNXB4Owp9Ci5mbGV4LWNvbnRhaW5lciB7CiAgZGlzcGxheTogZmxleDsKfQoKLmVsLWNvbnRhaW5lciB7CiAgdGV4dC1hbGlnbjogY2VudGVyOwogIGxpbmUtaGVpZ2h0OiAzOHB4Owp9Cg=="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6eA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/cases/manage","sourcesContent":["<template>\n  <div class=\"test-case\">\n    <div class=\"filter-container\">\n      <el-row :gutter=\"24\">\n        <el-col :span=\"6\">\n          <div class=\"demo-input-suffix\">\n            用例名称:\n            <el-input v-model=\"casesFrom.name\" placeholder=\"请输入用例名称\" style=\"width: 70%;margin-right: 5px;\" class=\"filter-item\" />\n          </div>\n        </el-col>\n        <el-col :span=\"6\">\n          <div class=\"demo-input-suffix\">\n            项目名称:\n            <el-select\n              v-model=\"projectValue\"\n              placeholder=\"请选择用例类型\"\n              @change=\"changeProject\"\n            >\n              <el-option\n                v-for=\"item in projectOption\"\n                :key=\"item.value\"\n                :label=\"item.label\"\n                :value=\"item.value\"\n              />\n            </el-select>\n          </div>\n        </el-col>\n        <el-col :span=\"6\">\n          <div class=\"demo-input-suffix\">\n            模块名称:\n            <el-select\n              ref=\"selectTree\"\n              v-model=\"moduleValue\"\n              class=\"main-select-tree\"\n              placeholder=\"请选择模块\"\n            >\n              <el-option style=\"height: 100%; padding: 0;\" value=\"\" />\n              <el-tree\n                ref=\"selectelTree\"\n                class=\"main-select-el-tree\"\n                :data=\"moduleData\"\n                :props=\"treeProps\"\n                :expand-on-click-node=\"expandOnClickNode\"\n                highlight-current\n                default-expand-all\n                style=\"font-weight: normal;\"\n                @node-click=\"handleNodeClick\"\n              />\n            </el-select>\n          </div>\n        </el-col>\n        <el-col :span=\"6\">\n          <div class=\"demo-input-suffix\">\n            用例类型:\n            <el-select\n              v-model=\"typeValue\"\n              placeholder=\"请选择用例类型\"\n              @change=\"changeType\"\n            >\n              <el-option\n                v-for=\"item in typeOption\"\n                :key=\"item.value\"\n                :label=\"item.label\"\n                :value=\"item.value\"\n              />\n            </el-select>\n          </div>\n        </el-col>\n      </el-row>\n      <el-row :gutter=\"24\" style=\"margin-top: 15px;\">\n        <el-col :span=\"6\">\n          <div class=\"demo-input-suffix\">\n            用例标签:\n            <el-select\n              v-model=\"testLableValue\"\n              placeholder=\"请选择用例标签\"\n              @change=\"changeTestLable\"\n            >\n              <el-option\n                v-for=\"item in testLableOption\"\n                :key=\"item.value\"\n                :label=\"item.label\"\n                :value=\"item.value\"\n              />\n            </el-select>\n          </div>\n        </el-col>\n        <el-col :span=\"6\">\n          <div class=\"demo-input-suffix\">\n            重要程度:\n            <el-select\n              v-model=\"importanceValue\"\n              placeholder=\"请选择重要程度\"\n              @change=\"changeImportance\"\n            >\n              <el-option\n                v-for=\"item in importanceOption\"\n                :key=\"item.value\"\n                :label=\"item.label\"\n                :value=\"item.value\"\n              />\n            </el-select>\n          </div>\n        </el-col>\n      </el-row>\n      <div style=\"text-align: right;margin-top: 10px;\">\n        <el-button class=\"filter-item\" icon=\"el-icon-delete\" @click=\"clearSearch()\">重置</el-button>\n        <el-button class=\"filter-item\" type=\"primary\" icon=\"el-icon-search\" @click=\"getCasesList()\">搜索</el-button>\n      </div>\n    </div>\n    <div style=\"text-align: left; margin-top: 10px;\">\n      <el-button class=\"el-icon-circle-plus-outline\" type=\"primary\" @click=\"createTestCase()\">创建测试用例</el-button>\n    </div>\n    <div style=\"margin-top: 10px\">\n      <el-table\n        :data=\"testCaseData\"\n        border\n        style=\"width: 100%\"\n      >\n        <el-table-column prop=\"id\" label=\"用例ID\" width=\"80\" />\n        <el-table-column prop=\"name\" label=\"用例名称\" width=\"auto\" show-overflow-tooltip />\n        <el-table-column prop=\"project_name\" label=\"项目名称\" width=\"auto\" />\n        <el-table-column prop=\"module_name\" label=\"模块名称\" width=\"auto\" />\n        <el-table-column prop=\"type\" label=\"测试用例类型\" width=\"auto\">\n          <template slot-scope=\"{ row }\">\n            {{ row.type | caseType }}\n          </template>\n        </el-table-column>\n        <el-table-column prop=\"test_label\" label=\"用例标签\" width=\"auto\">\n          <template slot-scope=\"{ row }\">\n            {{ row.test_label | testLabel }}\n          </template>\n        </el-table-column>\n        <el-table-column prop=\"importance\" label=\"重要程度\" width=\"auto\">\n          <template slot-scope=\"{ row }\">\n            <el-tag :type=\"caseImportanceType(row.importance)\" effect=\"plain\">\n              {{ row.importance | caseImportance }}\n            </el-tag>\n          </template>\n        </el-table-column>\n        <el-table-column prop=\"create_time\" label=\"创建时间\" width=\"auto\" />\n        <el-table-column fixed=\"right\" label=\"操作\">\n          <template slot-scope=\"scope\">\n            <el-button\n              type=\"text\"\n              @click=\"showTestCase(scope.row)\"\n            >查看</el-button>\n            <el-button\n              type=\"text\"\n              @click=\"editTestCase(scope.row)\"\n            >编辑</el-button>\n            <el-button\n              type=\"text\"\n              @click=\"deleteTestCase(scope.row)\"\n            >删除</el-button>\n          </template>\n        </el-table-column>\n      </el-table>\n      <!--分页-->\n      <div style=\"width: 100%; text-align: right\">\n        <el-pagination\n          background\n          :total=\"total\"\n          :page-size=\"req.size\"\n          layout=\"total, prev, pager, next\"\n          @current-change=\"handleCurrentChange\"\n        />\n      </div>\n    </div>\n    <!-- 创建测试用例 -->\n    <test-cases-dialog\n      v-if=\"dialogFlag\"\n      :title=\"testCaseTitle\"\n      :case=\"currentTestCaseId\"\n      @cancel=\"closeDialog\"\n    />\n  </div>\n</template>\n<script>\nimport TestCasesDialog from '@/components/Cases/testCasesDialog'\nimport { projectList } from '@/api/projects'\nimport { getCasesList } from '@/api/cases'\nimport { getModuleTree } from '@/api/modules'\n\nexport default {\n  name: 'CaseManage',\n  components: {\n    TestCasesDialog\n  },\n  filters: {\n    caseType(value) {\n      if (value === 1) {\n        return '功能测试用例'\n      } else if (value === 2) {\n        return '接口测试用例'\n      } else {\n        return '未知类型'\n      }\n    },\n    testLabel(value) {\n      if (value === 1) {\n        return '正向场景测试用例'\n      } else if (value === 2) {\n        return '异常场景测试用例'\n      } else {\n        return ''\n      }\n    },\n    caseImportance(value) {\n      if (value === 1) {\n        return 'P0'\n      } else if (value === 2) {\n        return 'P1'\n      } else if (value === 3) {\n        return 'P2'\n      } else if (value === 4) {\n        return 'P3'\n      } else {\n        return ''\n      }\n    },\n    testCaseStatus(value) {\n      if (value === 1) {\n        return '未执行'\n      } else if (value === 2) {\n        return '执行中'\n      } else if (value === 3) {\n        return '已完成'\n      } else {\n        return '未知状态'\n      }\n    },\n    resultStatus(value) {\n      if (value === 1) {\n        return '失败'\n      } else if (value === 2) {\n        return '通过'\n      } else {\n        return '未知状态'\n      }\n    }\n  },\n  data() {\n    return {\n      testCaseTitle: 'create',\n      dialogFlag: false,\n      testCaseData: [],\n      expandOnClickNode: true,\n      treeProps: {\n        children: 'children',\n        label: 'label'\n      },\n      moduleValue: null,\n      moduleData: [],\n      projectValue: '',\n      projectLabel: '',\n      projectOption: [],\n      casesFrom: {\n        'name': '',\n        'project_id': 0,\n        'module_id': 0,\n        'type': 0,\n        'test_label': 0,\n        'importance': 0,\n        'priority': 0\n      },\n      req: {\n        page: 1,\n        size: 10\n      },\n      // 分页页数\n      total: 10,\n      typeValue: '',\n      typeLabel: '',\n      typeOption: [\n        {\n          value: 1,\n          label: '功能测试用例'\n        },\n        {\n          value: 2,\n          label: '接口测试用例'\n        }\n      ],\n      importanceValue: '',\n      importanceLabel: '',\n      importanceOption: [\n        {\n          value: 1,\n          label: 'P0'\n        },\n        {\n          value: 2,\n          label: 'P1'\n        },\n        {\n          value: 3,\n          label: 'P2'\n        },\n        {\n          value: 4,\n          label: 'P3'\n        }\n      ],\n      testLableValue: '',\n      testLableLabel: '',\n      testLableOption: [\n        {\n          value: 1,\n          label: '正向场景测试用例'\n        },\n        {\n          value: 2,\n          label: '异常场景测试用例'\n        }\n      ],\n      currentTestCaseId: 0\n    }\n  },\n  mounted() {\n    this.initProjectList()\n    // this.initModuleAllList()\n    this.getCasesList()\n  },\n  methods: {\n    testCaseStatusType(value) {\n      if (value === 1) {\n        return 'danger'\n      } else if (value === 2) {\n        return 'info'\n      } else if (value === 3) {\n        return 'success'\n      } else {\n        return ''\n      }\n    },\n    resultStatusType(value) {\n      if (value === 1) {\n        return 'danger'\n      } else if (value === 2) {\n        return 'success'\n      } else {\n        return ''\n      }\n    },\n    caseImportanceType(value) {\n      if (value === 1) {\n        return 'danger'\n      } else if (value === 2) {\n        return 'warning'\n      } else if (value === 3) {\n        return 'info'\n      } else if (value === 4) {\n        return 'success'\n      } else {\n        return ''\n      }\n    },\n    // 创建用例集\n    createTestCase() {\n      this.dialogFlag = true\n      this.testCaseTitle = 'create'\n    },\n    showTestCase(row) {\n      this.currentTestCaseId = row.id\n      this.dialogFlag = true\n      this.testCaseTitle = 'detail'\n    },\n    editTestCase(row) {\n      this.currentTestCaseId = row.id\n      this.dialogFlag = true\n      this.testCaseTitle = 'edit'\n    },\n    closeDialog() {\n      this.dialogFlag = false\n      this.getCasesList()\n    },\n    // 初始化项目列表\n    async initProjectList() {\n      const req_body = {\n        'name': ''\n      }\n      const resp = await projectList(this.req, req_body)\n      if (resp.success === true) {\n        // this.projectValue = resp.items[0].id\n        // this.projectLabel = resp.items[0].name\n        // 在初始化项目信息，同时初始化项目下的模块信息\n        for (let i = 0; i < resp.items.length; i++) {\n          this.projectOption.push({\n            value: resp.items[i].id,\n            label: resp.items[i].name\n          })\n        }\n        // this.$message.success(\"查询成功！\")\n      } else {\n        this.$message.error('查询失败！')\n      }\n    },\n    // 修改选中项目\n    changeProject(value) {\n      console.log('change project -->', value)\n      this.projectValue = value\n      this.projectLabel = this.projectOption.find(\n        (item) => item.value === value\n      ).label\n      console.log('选中项目名称', this.projectLabel)\n      this.initModuleList(value)\n    },\n    // 查询模块列表\n    async initModuleList(pid) {\n      const resp = await getModuleTree(pid)\n      if (resp.success === true) {\n        this.moduleData = resp.result\n        // this.$message.success(\"查询成功！\")\n      } else {\n        this.$message.error('查询失败！')\n      }\n    },\n    // 获取测试用例列表\n    async getCasesList() {\n      const resp = await getCasesList(this.req, JSON.stringify(this.casesFrom))\n      if (resp.success === true) {\n        this.total = resp.total\n        for (let i = 0; i < resp.items.length; i++) {\n          resp.items[i].create_time = this.$moment(\n            resp.items[i].create_time\n          ).format('YYYY-MM-DD HH:mm:ss')\n        }\n        this.testCaseData = resp.items\n        this.$message.success('查询成功！')\n      } else {\n        this.$message.error('查询失败！')\n      }\n    },\n    // 跳转到第几页\n    handleCurrentChange(val) {\n      // console.log(`当前页: ${val}`)\n      this.req.page = val\n      this.getCasesList()\n    },\n    // 清除搜索\n    clearSearch() {\n      this.projectValue = ''\n      this.casesFrom.project_id = 0\n\n      this.moduleValue = ''\n      this.casesFrom.module_id = 0\n\n      this.typeValue = ''\n      this.casesFrom.type = 0\n\n      this.testLableValue = ''\n      this.casesFrom.test_label = 0\n\n      this.importanceValue = ''\n      this.casesFrom.importance = 0\n\n      this.casesFrom.name = ''\n      this.getCasesList()\n    },\n    // 点击节点的响应\n    handleNodeClick(node) {\n      this.moduleValue = node.label\n      this.$refs.selectTree.blur()\n      this.casesFrom.module_id = node.id\n      console.log(node.label)\n    },\n    // 获取选中的用例类型\n    changeType(value) {\n      this.typeValue = value\n      this.typeLabel = this.typeOption.find(\n        (item) => item.value === value\n      ).label\n      this.casesFrom.type = value\n    },\n    changeImportance(value) {\n      this.importanceValue = value\n      this.importanceLabel = this.importanceOption.find(\n        (item) => item.value === value\n      ).label\n      this.casesFrom.importance = value\n    },\n    changeTestLable(value) {\n      this.testLableValue = value\n      this.testLableLabel = this.testLableOption.find(\n        (item) => item.value === value\n      ).label\n      this.casesFrom.test_label = value\n    }\n  }\n}\n</script>\n<style scoped>\n.custom-tree-node {\n  width: 100%;\n}\n.label-title {\n  font-family: \"Liberation Mono\", monospace, serif, sans-serif;\n  font-size: 24px;\n}\n.label-text {\n  font-family: \"Lucida Calligraphy\", cursive, serif, sans-serif;\n  font-size: 20px;\n  font-weight: bolder;\n  float: left;\n  margin-top: 5px;\n}\n.flex-container {\n  display: flex;\n}\n\n.el-container {\n  text-align: center;\n  line-height: 38px;\n}\n</style>\n"]}]}